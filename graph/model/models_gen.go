// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

type Mutation struct {
}

type Query struct {
}

type Subscription struct {
}

type Verification struct {
	ID                 string                 `json:"id"`
	Inn                string                 `json:"inn"`
	Status             VerificationStatus     `json:"status"`
	AuthorEmail        string                 `json:"authorEmail"`
	CompanyID          *string                `json:"companyId,omitempty"`
	RequestedDataTypes []VerificationDataType `json:"requestedDataTypes"`
	Data               []*VerificationData    `json:"data,omitempty"`
	CreatedAt          string                 `json:"createdAt"`
	UpdatedAt          string                 `json:"updatedAt"`
}

type VerificationData struct {
	DataType  VerificationDataType `json:"dataType"`
	Data      string               `json:"data"`
	CreatedAt string               `json:"createdAt"`
}

type VerificationDataResult struct {
	Verification                    *Verification `json:"verification"`
	BasicInformation                *string       `json:"basicInformation,omitempty"`
	Activities                      *string       `json:"activities,omitempty"`
	AddressesByCredinform           *string       `json:"addressesByCredinform,omitempty"`
	AddressesByUnifiedStateRegister *string       `json:"addressesByUnifiedStateRegister,omitempty"`
	AffiliatedCompanies             *string       `json:"affiliatedCompanies,omitempty"`
	ArbitrageStatistics             *string       `json:"arbitrageStatistics,omitempty"`
}

type VerificationDataType string

const (
	VerificationDataTypeBasicInformation                VerificationDataType = "BASIC_INFORMATION"
	VerificationDataTypeActivities                      VerificationDataType = "ACTIVITIES"
	VerificationDataTypeAddressesByCredinform           VerificationDataType = "ADDRESSES_BY_CREDINFORM"
	VerificationDataTypeAddressesByUnifiedStateRegister VerificationDataType = "ADDRESSES_BY_UNIFIED_STATE_REGISTER"
	VerificationDataTypeAffiliatedCompanies             VerificationDataType = "AFFILIATED_COMPANIES"
	VerificationDataTypeArbitrageStatistics             VerificationDataType = "ARBITRAGE_STATISTICS"
)

var AllVerificationDataType = []VerificationDataType{
	VerificationDataTypeBasicInformation,
	VerificationDataTypeActivities,
	VerificationDataTypeAddressesByCredinform,
	VerificationDataTypeAddressesByUnifiedStateRegister,
	VerificationDataTypeAffiliatedCompanies,
	VerificationDataTypeArbitrageStatistics,
}

func (e VerificationDataType) IsValid() bool {
	switch e {
	case VerificationDataTypeBasicInformation, VerificationDataTypeActivities, VerificationDataTypeAddressesByCredinform, VerificationDataTypeAddressesByUnifiedStateRegister, VerificationDataTypeAffiliatedCompanies, VerificationDataTypeArbitrageStatistics:
		return true
	}
	return false
}

func (e VerificationDataType) String() string {
	return string(e)
}

func (e *VerificationDataType) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VerificationDataType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VerificationDataType", str)
	}
	return nil
}

func (e VerificationDataType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *VerificationDataType) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e VerificationDataType) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type VerificationStatus string

const (
	VerificationStatusInProcess       VerificationStatus = "IN_PROCESS"
	VerificationStatusProcessing      VerificationStatus = "PROCESSING"
	VerificationStatusCompleted       VerificationStatus = "COMPLETED"
	VerificationStatusError           VerificationStatus = "ERROR"
	VerificationStatusCompanyNotFound VerificationStatus = "COMPANY_NOT_FOUND"
)

var AllVerificationStatus = []VerificationStatus{
	VerificationStatusInProcess,
	VerificationStatusProcessing,
	VerificationStatusCompleted,
	VerificationStatusError,
	VerificationStatusCompanyNotFound,
}

func (e VerificationStatus) IsValid() bool {
	switch e {
	case VerificationStatusInProcess, VerificationStatusProcessing, VerificationStatusCompleted, VerificationStatusError, VerificationStatusCompanyNotFound:
		return true
	}
	return false
}

func (e VerificationStatus) String() string {
	return string(e)
}

func (e *VerificationStatus) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VerificationStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VerificationStatus", str)
	}
	return nil
}

func (e VerificationStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *VerificationStatus) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e VerificationStatus) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
