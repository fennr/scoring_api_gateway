package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"scoring_api_gateway/graph/model"
)

// CreateVerification is the resolver for the createVerification field.
func (r *mutationResolver) CreateVerification(ctx context.Context, inn string, requestedDataTypes []model.VerificationDataType) (*model.Verification, error) {
	// Здесь можно получить email пользователя из контекста, пока используем заглушку
	return r.Resolver.VerificationService.CreateVerification(ctx, inn, requestedDataTypes, "test@example.com")
}

// Verification is the resolver for the verification field.
func (r *queryResolver) Verification(ctx context.Context, id string) (*model.Verification, error) {
	return r.Resolver.VerificationService.GetVerification(ctx, id)
}

// Verifications is the resolver for the verifications field.
func (r *queryResolver) Verifications(ctx context.Context, limit *int32, offset *int32) ([]*model.Verification, error) {
	return r.Resolver.VerificationService.GetAllVerifications(ctx, limit, offset)
}

// VerificationWithData is the resolver for the verificationWithData field.
func (r *queryResolver) VerificationWithData(ctx context.Context, id string) (*model.VerificationDataResult, error) {
	return r.Resolver.VerificationService.GetVerificationWithData(ctx, id)
}

// VerificationCompleted is the resolver for the verificationCompleted field.
func (r *subscriptionResolver) VerificationCompleted(ctx context.Context, id string) (<-chan *model.Verification, error) {
	return nil, fmt.Errorf("not implemented")
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
